// <auto-generated />
using System;
using BackEnd.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEnd.Migrations
{
    [DbContext(typeof(CrdpCurriculumMsContext))]
    partial class CrdpCurriculumMsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Arabic_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackEnd.Models.Code", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CodeName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("BackEnd.Models.CodesContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeContentDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CodeContentName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CodeId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Code_Content");

                    b.HasIndex("CodeId");

                    b.ToTable("CodesContent", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Competencies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CompetenceActive")
                        .HasColumnType("bit");

                    b.Property<string>("CompetenceDetails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CompetenceLevel")
                        .HasColumnType("int");

                    b.Property<string>("CompetenceName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CompetenceParentId")
                        .HasColumnType("int");

                    b.Property<int?>("CompetenceType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserCreated")
                        .HasColumnType("int");

                    b.Property<int?>("UserModified")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Competencies");
                });

            modelBuilder.Entity("BackEnd.Models.CompetenciesClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cid")
                        .HasColumnType("int")
                        .HasColumnName("CId");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserCreated")
                        .HasColumnType("int");

                    b.Property<int?>("UserModified")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cid");

                    b.ToTable("CompetenciesClass", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.CompetenciesConceptField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cid")
                        .HasColumnType("int")
                        .HasColumnName("CId");

                    b.Property<int?>("ConceptFieldId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserCreated")
                        .HasColumnType("int");

                    b.Property<int?>("UserModified")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cid");

                    b.ToTable("CompetenciesConceptField", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.CompetenciesConceptTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cid")
                        .HasColumnType("int")
                        .HasColumnName("CId");

                    b.Property<int?>("ConceptTreeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserCreated")
                        .HasColumnType("int");

                    b.Property<int?>("UserModified")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cid");

                    b.HasIndex("ConceptTreeId");

                    b.ToTable("CompetenciesConceptTree", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.CompetenciesCross", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CompMainId")
                        .HasColumnType("int")
                        .HasColumnName("CompMainID");

                    b.Property<int?>("CompSubId")
                        .HasColumnType("int")
                        .HasColumnName("CompSubID");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserCreated")
                        .HasColumnType("int");

                    b.Property<int?>("UserModified")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompMainId");

                    b.ToTable("CompetenciesCross", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.CompetenciesDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cid")
                        .HasColumnType("int")
                        .HasColumnName("CId");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int?>("DomainId")
                        .HasColumnType("int");

                    b.Property<int?>("UserCreated")
                        .HasColumnType("int");

                    b.Property<int?>("UserModified")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cid");

                    b.ToTable("CompetenciesDomain", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.CompetenciesStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Step")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StepComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("StepDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("StepStatus")
                        .HasColumnType("int");

                    b.Property<int?>("StepUserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserCreated")
                        .HasColumnType("int");

                    b.Property<int?>("UserModified")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cid");

                    b.ToTable("CompetenciesSteps");
                });

            modelBuilder.Entity("BackEnd.Models.CompetenciesVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CompetenceActive")
                        .HasColumnType("bit");

                    b.Property<string>("CompetenceDetails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CompetenceLevel")
                        .HasColumnType("int");

                    b.Property<string>("CompetenceName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CompetenceParentId")
                        .HasColumnType("int");

                    b.Property<int?>("CompetenceType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MainId")
                        .HasColumnType("int");

                    b.Property<int?>("UserCreated")
                        .HasColumnType("int");

                    b.Property<int?>("UserModified")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VersionDateCreated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("CompetenciesVersions");
                });

            modelBuilder.Entity("BackEnd.Models.ConceptTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("ConceptActive")
                        .HasColumnType("bit");

                    b.Property<string>("ConceptDetails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ConceptDomain")
                        .HasColumnType("int");

                    b.Property<int?>("ConceptField")
                        .HasColumnType("int");

                    b.Property<int?>("ConceptLevel")
                        .HasColumnType("int");

                    b.Property<string>("ConceptName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ConceptParentId")
                        .HasColumnType("int");

                    b.Property<int?>("ConceptType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserCreated")
                        .HasColumnType("int");

                    b.Property<int?>("UserModified")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConceptTree", null, t =>
                        {
                            t.HasTrigger("trginsertlevel");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("BackEnd.Models.ConceptTreeClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int?>("Ctid")
                        .HasColumnType("int")
                        .HasColumnName("CTId");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserCreated")
                        .HasColumnType("int");

                    b.Property<int?>("UserModified")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Ctid");

                    b.ToTable("ConceptTreeClass", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.ConfigCompetenciesLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompetenciesLevel")
                        .HasColumnType("int");

                    b.Property<int?>("CompetenciesNextLevel")
                        .HasColumnType("int");

                    b.Property<int?>("CompetenciesPreviousLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConfigCompetenciesLevel", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.ConfigConceptTreeLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConceptTreeLevel")
                        .HasColumnType("int");

                    b.Property<int?>("ConceptTreeNextLevel")
                        .HasColumnType("int");

                    b.Property<int?>("ConceptTreePreviousLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConfigConceptTreeLevel", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.ConfigCycleClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Class")
                        .HasColumnType("int");

                    b.Property<int?>("Cycle")
                        .HasColumnType("int");

                    b.Property<int?>("NextClass")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousClass")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConfigCycleClass", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.ConfigDomainField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DomainConcept")
                        .HasColumnType("int");

                    b.Property<int?>("FiledConcept")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConfigDomainField", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RoleDetails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserCreated")
                        .HasColumnType("int");

                    b.Property<int?>("UserModified")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BackEnd.Models.RoleService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool?>("CanView")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("UserCreated")
                        .HasColumnType("int");

                    b.Property<int?>("UserModified")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServiceId");

                    b.ToTable("RoleServices");
                });

            modelBuilder.Entity("BackEnd.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Clurl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CLURL");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Dependencies")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("HasChildren")
                        .HasColumnType("bit")
                        .HasColumnName("hasCHildren");

                    b.Property<string>("Parent")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Svurl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SVURL");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserCreated")
                        .HasColumnType("int");

                    b.Property<int?>("UserModified")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("BackEnd.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FName");

                    b.Property<string>("Lname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LName");

                    b.Property<string>("Mname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNb")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("UserStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("WorkGroup")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackEnd.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("BackEnd.Models.UserRolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Class")
                        .HasColumnType("int");

                    b.Property<int?>("ConceptFiled")
                        .HasColumnType("int");

                    b.Property<int?>("Domain")
                        .HasColumnType("int");

                    b.Property<int?>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRolePermissions");
                });

            modelBuilder.Entity("BackEnd.Models.VCompetenciesCascade", b =>
                {
                    b.Property<int?>("CompetenceLevel1")
                        .HasColumnType("int");

                    b.Property<int?>("CompetenceLevel2")
                        .HasColumnType("int");

                    b.Property<int?>("CompetenceLevel3")
                        .HasColumnType("int");

                    b.Property<int?>("CompetenceLevel4")
                        .HasColumnType("int");

                    b.Property<string>("CompetenceName1")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CompetenceName2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CompetenceName3")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CompetenceName4")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CompetenceType1")
                        .HasColumnType("int");

                    b.Property<int?>("CompetenceType2")
                        .HasColumnType("int");

                    b.Property<int?>("CompetenceType3")
                        .HasColumnType("int");

                    b.Property<int?>("CompetenceType4")
                        .HasColumnType("int");

                    b.Property<int>("Id1")
                        .HasColumnType("int")
                        .HasColumnName("id1");

                    b.Property<int?>("Id2")
                        .HasColumnType("int")
                        .HasColumnName("id2");

                    b.Property<int?>("Id3")
                        .HasColumnType("int")
                        .HasColumnName("id3");

                    b.Property<int?>("Id4")
                        .HasColumnType("int")
                        .HasColumnName("id4");

                    b.ToTable((string)null);

                    b.ToView("vCompetenciesCascade", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.CodesContent", b =>
                {
                    b.HasOne("BackEnd.Models.Code", "Code")
                        .WithMany("CodesContents")
                        .HasForeignKey("CodeId")
                        .HasConstraintName("FK_Code_Content_Codes");

                    b.Navigation("Code");
                });

            modelBuilder.Entity("BackEnd.Models.CompetenciesClass", b =>
                {
                    b.HasOne("BackEnd.Models.Competencies", "CidNavigation")
                        .WithMany("CompetenciesClasses")
                        .HasForeignKey("Cid")
                        .HasConstraintName("FK_CompetenciesClass_Competencies");

                    b.Navigation("CidNavigation");
                });

            modelBuilder.Entity("BackEnd.Models.CompetenciesConceptField", b =>
                {
                    b.HasOne("BackEnd.Models.Competencies", "CidNavigation")
                        .WithMany("CompetenciesConceptFields")
                        .HasForeignKey("Cid")
                        .HasConstraintName("FK_CompetenciesConceptField_Competencies");

                    b.Navigation("CidNavigation");
                });

            modelBuilder.Entity("BackEnd.Models.CompetenciesConceptTree", b =>
                {
                    b.HasOne("BackEnd.Models.Competencies", "CidNavigation")
                        .WithMany("CompetenciesConceptTrees")
                        .HasForeignKey("Cid")
                        .HasConstraintName("FK_CompetenciesConceptTree_Competencies");

                    b.HasOne("BackEnd.Models.ConceptTree", "ConceptTree")
                        .WithMany("CompetenciesConceptTrees")
                        .HasForeignKey("ConceptTreeId")
                        .HasConstraintName("FK_CompetenciesConceptTree_ConceptTree");

                    b.Navigation("CidNavigation");

                    b.Navigation("ConceptTree");
                });

            modelBuilder.Entity("BackEnd.Models.CompetenciesCross", b =>
                {
                    b.HasOne("BackEnd.Models.Competencies", "CompMain")
                        .WithMany("CompetenciesCrossCompMains")
                        .HasForeignKey("CompMainId")
                        .HasConstraintName("FK_CompetenciesCross_CompetenciesMain");

                    b.HasOne("BackEnd.Models.Competencies", "IdNavigation")
                        .WithOne("CompetenciesCrossIdNavigation")
                        .HasForeignKey("BackEnd.Models.CompetenciesCross", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_CompetenciesCross_CompetenciesSub");

                    b.Navigation("CompMain");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("BackEnd.Models.CompetenciesDomain", b =>
                {
                    b.HasOne("BackEnd.Models.Competencies", "CidNavigation")
                        .WithMany("CompetenciesDomains")
                        .HasForeignKey("Cid")
                        .HasConstraintName("FK_CompetenciesDomain_Competencies");

                    b.Navigation("CidNavigation");
                });

            modelBuilder.Entity("BackEnd.Models.CompetenciesStep", b =>
                {
                    b.HasOne("BackEnd.Models.Competencies", "CidNavigation")
                        .WithMany("CompetenciesSteps")
                        .HasForeignKey("Cid")
                        .HasConstraintName("FK_CompetenciesSteps_Competencies");

                    b.Navigation("CidNavigation");
                });

            modelBuilder.Entity("BackEnd.Models.ConceptTreeClass", b =>
                {
                    b.HasOne("BackEnd.Models.ConceptTree", "Ct")
                        .WithMany("ConceptTreeClasses")
                        .HasForeignKey("Ctid")
                        .HasConstraintName("FK_ConceptTreeClass_ConceptTree");

                    b.Navigation("Ct");
                });

            modelBuilder.Entity("BackEnd.Models.RoleService", b =>
                {
                    b.HasOne("BackEnd.Models.Role", "Role")
                        .WithMany("RoleServices")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RoleServices_Roles");

                    b.HasOne("BackEnd.Models.Service", "Service")
                        .WithMany("RoleServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_RoleServices_Services");

                    b.Navigation("Role");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BackEnd.Models.UserRole", b =>
                {
                    b.HasOne("BackEnd.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRoles_Roles");

                    b.HasOne("BackEnd.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRoles_Users");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd.Models.UserRolePermission", b =>
                {
                    b.HasOne("BackEnd.Models.UserRole", "UserRole")
                        .WithMany("UserRolePermissions")
                        .HasForeignKey("UserRoleId")
                        .HasConstraintName("FK_UserRolePermissions_UserRoles");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("BackEnd.Models.Code", b =>
                {
                    b.Navigation("CodesContents");
                });

            modelBuilder.Entity("BackEnd.Models.Competencies", b =>
                {
                    b.Navigation("CompetenciesClasses");

                    b.Navigation("CompetenciesConceptFields");

                    b.Navigation("CompetenciesConceptTrees");

                    b.Navigation("CompetenciesCrossCompMains");

                    b.Navigation("CompetenciesCrossIdNavigation");

                    b.Navigation("CompetenciesDomains");

                    b.Navigation("CompetenciesSteps");
                });

            modelBuilder.Entity("BackEnd.Models.ConceptTree", b =>
                {
                    b.Navigation("CompetenciesConceptTrees");

                    b.Navigation("ConceptTreeClasses");
                });

            modelBuilder.Entity("BackEnd.Models.Role", b =>
                {
                    b.Navigation("RoleServices");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BackEnd.Models.Service", b =>
                {
                    b.Navigation("RoleServices");
                });

            modelBuilder.Entity("BackEnd.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BackEnd.Models.UserRole", b =>
                {
                    b.Navigation("UserRolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
